###############################################################################
## Copyright (c) 2014 AllSeen Alliance. All rights reserved.
##
## Permission to use, copy, modify, and/or distribute this software for any
## purpose with or without fee is hereby granted, provided that the above
## copyright notice and this permission notice appear in all copies.
##
## THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
###############################################################################
/* Source: "$command_line.xml_input_file" */
#import GenAndroid
#import CommonCheetah as cc
#from .. import common

package $interface.get_path();

import org.alljoyn.bus.BusObject;
#if $interface.signals
import org.alljoyn.bus.annotation.BusSignalHandler;
#end if

import android.os.Handler;

/* The AllJoyn service implementation of $interface.interface_full_name. */
public class ${interface.interface_name}Impl implements $interface.interface_name, BusObject {
    private Handler mHandler;   /* Means by which to send message to the user interface. */
    private int mMessageId;     /* Identifier to be used for this interface instance in UI messages. */

    /*
     * Constructor for the ${interface.interface_name}Impl class.
     * h is used to send messages sent back to the user interface.
     * messageId, is the identifier to use for sending message from this interface instance.
     */
    public ${interface.interface_name}Impl(Handler h, int messageId)
    {
        mHandler = h;
        mMessageId = messageId;
        sendUiMessage("Created an instance of ${interface.interface_name}Imp.");
    }

    #for $m in $interface.methods
        #set $return_type = $GenAndroid.get_java_return_type(m)
    /*
     * Intentionally empty implementation of the method since the true
     * implementation is on the server side.
     */
    public $return_type $common.make_camel_case($m.name, None)($m.input_arg_info.arg_declaration) {
        #if $return_type != "void"
            #set $arg = $GenAndroid.get_return_arg($m)
        $return_type returnValue$GenAndroid.get_initialization($arg, $m);

        return returnValue;
        #end if
    }

    #end for
    #for $p in $interface.properties
        #if $p.is_writeable()
    /*
     * Intentionally empty implementation of the property since the true
     * implementation is on the server side.
     */
    public void set${p.name}($p.input_arg_info.arg_declaration) {
    }

        #end if
        #if $p.is_readable()
            #set $return_type = $GenAndroid.get_java_return_type($p)
    /*
     * Intentionally empty implementation of the property since the true
     * implementation is on the server side.
     */
    public $return_type get${p.name}() {
        $return_type returnValue$GenAndroid.get_initialization(p.args[0], $p);

        return returnValue;
    }

        #end if
    #end for
    #for $s in $interface.signals
    /*
     * This receives the signal from the emitter at the service.
     */
    @BusSignalHandler(iface = "$interface.interface_full_name", signal = "$s.name")
    public void $common.make_camel_case($s.name, None)($s.output_arg_info.arg_declaration) {
        sendUiMessage("Signal $interface.interface_full_name::${s.name}() received.");
$cc.CommonCheetah.print_args($s.args, 8)#slurp
    }

    #end for
    /* Helper function to send a message to the UI thread. */
    private void sendUiMessage(String message) {
        mHandler.sendMessage(mHandler.obtainMessage(mMessageId, message));
    }
}
