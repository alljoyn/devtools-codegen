###############################################################################
## Copyright (c) 2014 AllSeen Alliance. All rights reserved.
##
## Permission to use, copy, modify, and/or distribute this software for any
## purpose with or without fee is hereby granted, provided that the above
## copyright notice and this permission notice appear in all copies.
##
## THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
###############################################################################

#import GenCPP
#import Util as u
#from .. import structdef as sd
/* Source: "$command_line.xml_input_file" */

\#include "${interface.intf_class}.h"
## Keep this after the generated header file since it might need un/marshal
## function declarations.
\#include <datadriven/Marshal.h>

namespace gen { namespace ${interface.get_full_coded_namespace_name} {

const qcc::String ${interface.intf_class}::GetName() const
{
    return IFACE_NAME;
}

QStatus ${interface.intf_class}::BuildInterface(ajn::InterfaceDescription& desc) const
{
    QStatus status;

    do {
        // add properties
#for $property in $interface.properties
#set $arg=$GenCPP.get_arg(property)
        if (ER_OK != (status = desc.AddProperty("${property.name}", "${arg.get_flattened_signature()}", ajn::PROP_ACCESS_READ))) break;
#end for
        // add signal for property updates
        if (ER_OK != (status = desc.AddSignal("_update", ${GenCPP.sig_string($interface.properties)}, "${GenCPP.names_csv($interface.properties)}"))) break;
        // add defined methods
#for $method in $interface.methods
#set $sigin=$GenCPP.sig_string($method.args, 'in')
#set $sigout=$GenCPP.sig_string($method.args, 'out')
#set $names=$GenCPP.names_csv($method.args, 'in')
#set $names=$GenCPP.names_csv($method.args, 'out', initial=$names)
        if (ER_OK != (status = desc.AddMethod("${method.name}", ${sigin}, ${sigout}, "${names}"))) break;
#end for
        // add defined signals
#for $signal in $interface.signals
#set $sig=$GenCPP.sig_string($signal.args)
#set $names=$GenCPP.names_csv($signal.args)
        if (ER_OK != (status = desc.AddSignal("${signal.name}", ${sig}, "${names}"))) break;
#end for
    } while (0);
    return status;
}

QStatus ${interface.intf_class}::ResolveMembers(const ajn::InterfaceDescription& desc, const ajn::InterfaceDescription::Member*** member) const
{
    QStatus status = ER_OK;

    // keep references to actual members for later usage
    *member = NULL;
    *member = new const ajn::InterfaceDescription::Member*[${1 + $len($interface.methods) + $len($interface.signals)}];
    if (NULL != *member) {
        (*member)[0] = desc.GetSignal("_update");
#set $i=0
#for $method in $interface.methods
#set $i=$i + 1
        (*member)[${i}] = desc.GetMethod("${method.name}");
#end for
#for $signal in $interface.signals
#set $i=$i + 1
        (*member)[${i}] = desc.GetSignal("${signal.name}");
#end for
    }
    else {
        status = ER_OUT_OF_MEMORY;
    }
    return status;
}

}}

namespace datadriven {
#for $container in $interface.get_containers_in_declaration_order()
#if $isinstance($container, $sd.StructDef)
#set $fields=$container.get_field_list()

QStatus Marshal(ajn::MsgArg& _msgarg, const ::gen::${interface.get_full_coded_namespace_name}::${interface.intf_class}::${container.name}& data)
{
    QStatus _status = ER_OK;
    size_t _numMembers = ${len($fields)};
    ajn::MsgArg* _members = new ajn::MsgArg[_numMembers];

    do {
${u.Util.argarray_marshal($fields, '_members', '_status', container = 'data.')}#slurp
        _status = MarshalStruct(_msgarg, _members, _numMembers);
        _members = NULL;
    } while (0);

    delete[] _members;
    return _status;
}

QStatus Unmarshal(::gen::${interface.get_full_coded_namespace_name}::${interface.intf_class}::${container.name}& data, const ajn::MsgArg& _msgarg)
{
    QStatus _status = ER_FAIL;

    if ((ajn::ALLJOYN_STRUCT == _msgarg.typeId) &&
        (${len($fields)} == _msgarg.v_struct.numMembers)) {
        const ajn::MsgArg* _members = _msgarg.v_struct.members;

        do  {
${u.Util.argarray_unmarshal($fields, '_members', '_status', container = 'data.')}#slurp
        } while (0);
    }
    return _status;
}
#end if
#end for

}
