###############################################################################
## Copyright AllSeen Alliance. All rights reserved.
##
## Permission to use, copy, modify, and/or distribute this software for any
## purpose with or without fee is hereby granted, provided that the above
## copyright notice and this permission notice appear in all copies.
##
## THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
## WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
## MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
## ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
## WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
## ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
## OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
###############################################################################
This set of AllJoyn Thin Library files was produced from the XML source file
"$command_line.xml_input_file".

The files "CommonClientService.h" and "CommonClientService.c" are used by both
the client and service side. These contain information such as the service port,
the interface descriptions, and the instances of those interfaces.

The "SConstruct" file can be used to build the executables on the
development platforms supported by the AllJoyn Thin Core Library. To
do so, first run 'scons' to build the Thin Core Library. This creates
a 'dist' subdirectory with the AllJoyn headers and libraries. Place
the files created by the code generator in the 'dist' subdirectory of
your Thin Library source, then run 'scons' in that directory.

All other files are specific to either the client or service side. Such files
have either "Client" or "Service" as the first part of their name.

Hence in this directory you will find the following additional files:

#if not $command_line.client_only
    Service.h       [Includes other .h files and defines or declares stuff common to the service.]
    ServiceMain.c   [Initialized AllJoyn and dispatches messages.]
    ServiceDoWork.c [Handles Session Joined/Lost messages and does work on the main thread.]
    #for $key in sorted($service.interfaces):
        #set $iname = $service.interfaces[$key].interface_full_name

    [Files for the implementing the interface "$iname" on the service side.]
    Service${iname}.h
    Service${iname}.c
    #end for

#end if
    Client.h        [Includes other .h files and defines or declares stuff common to the client.]
    ClientMain.c    [Initialized AllJoyn and dispatches messages.]
#if $command_line.runnable
    ClientDoWork.c  [Handles Session Lost message and does work on the main thread.]
#else
    ClientDoWork.c  [Handles Session Lost message and does work. Use the -R flag to see examples.]
#end if
    #for $key in sorted($service.interfaces):
        #set $iname = $service.interfaces[$key].interface_full_name

    [Files for the implementing the interface "$iname" on the client side.]
    Client${iname}.h
    Client${iname}.c
    #end for

Search the files for "TODO:" to find instances where generated code should be
replaced or enhanced with code specific to your application.
